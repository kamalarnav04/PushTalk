🔧 Walkie-Talkie Web App — Full Build Instructions
✅ Overview
Build a web application where users can press a button to record audio and send it to others on the same local network in near real-time. Use WebSockets for real-time communication and HTML5 Web APIs for audio capture/playback.

🧱 Tech Stack
Frontend: HTML, CSS, JavaScript

Backend: Node.js with Express.js

WebSocket Library: socket.io

Audio API: HTML5 MediaRecorder and AudioContext

Network: Local Wi-Fi / LAN communication via IP

📁 Project Structure
pgsql
Copy
Edit
walkie-talkie-app/
│
├── server/
│   ├── server.js          ← Node.js + Express + Socket.IO backend
│   └── package.json
│
├── public/
│   ├── index.html         ← Main UI with push-to-talk button
│   ├── styles.css         ← Basic styling
│   └── script.js          ← JS for UI + audio recording + WebSocket handling
│
└── README.md              ← Project documentation
🚀 Step-by-Step Instructions
1. Initialize the project
Create a folder: walkie-talkie-app

Inside it, run npm init -y

Install dependencies:

bash
Copy
Edit
npm install express socket.io
2. Create the Express Web Server
Serve static files from the public/ folder

Set up socket.io on the server to handle incoming connections

Allow clients to broadcast audio blobs to other clients

3. Design the Web Interface
In public/index.html, create:

A "Push to Talk" button

A label or icon for "Talking..."

Optionally: a dropdown to select input/output device

4. Record Audio on Button Press
In public/script.js:

Use navigator.mediaDevices.getUserMedia({ audio: true }) to get microphone access

Use MediaRecorder API to start recording on mousedown and stop on mouseup

Send audio data chunks (.webm or .ogg) to server via WebSocket

5. Send Audio via WebSockets
When a client records audio, send the audio blob through socket.emit('audio', blob)

On the server, listen for audio events and broadcast the blob to all other clients (socket.broadcast.emit('audio', blob))

6. Receive and Play Audio on Other Clients
On the client, when receiving an audio event:

Convert the blob to a playable format

Use AudioContext or <audio> tag to play it

7. Ensure All Clients are on the Same Network
Use local IP address (e.g., 192.168.x.x) to access the server from multiple devices

Ensure firewall rules or browser permissions allow mic and audio playback

8. Test on Multiple Devices
Open the app on two or more devices connected to the same Wi-Fi

Press and hold the "Push to Talk" button on one device

Confirm that the audio plays on the other device in near real-time

🧠 Things to Tell Copilot Agent
Give Copilot Agent the following goals in plain language:

Build a Node.js + Express + Socket.IO backend

Create an HTML frontend with a push-to-talk button

Record mic audio using MediaRecorder

Send audio blob to the server via WebSocket

Server rebroadcasts audio blob to all other clients

Clients play received audio automatically

Ensure compatibility on all modern browsers

